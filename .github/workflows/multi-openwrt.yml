name: Multi-OpenWrt Images

env:
  TZ: Asia/Shanghai
  # 下载线程数 DOWNLOAD
  DOWNLOAD: 8
  # 编译核心数 0 默认最多
  NPROC: 0
  # 构建原版Uboot
  Vanilla: true
  # 环境 true 
  ENVIRONMENT: true

on:
  workflow_dispatch:
    inputs:
      INPUT_TARGET:
        description: "Target to build (platform/target/subtarget)"
        required: false
        default: "all"
  push:
    paths: 
      - '.github/workflows/multi-openwrt.yml'

jobs:
  Config:
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      TARGETS: ${{ steps.find-targets.outputs.TARGETS }}
 
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Find Targets
        id: find-targets
        env:
          INPUT_TARGET: ${{ github.event.inputs.INPUT_TARGET }}
        run: |
          ### 两个变量判断是否相等 [ "$var1" = "$var2" ] 不相等 || 则判断   "$INPUT_TARGET" = ""  是否相等
          if [ "$INPUT_TARGET" = "all" ] || [ "$INPUT_TARGET" = "" ]; then
            export TARGETS="$(cat config/openwrt.config)"
          else
            export TARGETS="$INPUT_TARGET"
          fi
          ### TARGETS="arm_cortex-a9_vfpv3-d16/mvebu/cortexa9/linux-arm-v7 i386_pentium4/x86/generic/linux-386/386 x86_64/x86/64/linux-amd64/amd64"
          echo -e "\033[31m INPUT_TARGET=${INPUT_TARGETT} \033[0m"
          echo -e "\033[31m TARGETS=${INPUT_TARGET} \033[0m"
          echo -e "\033[31m INPUT_TARGET: \033[0m $INPUT_TARGET"
          echo -e "\033[31m TARGETS:  $TARGETS \033[0m"
          ## cat config/platform.config
          
          JSON='{"config": ["default"], "targets":['
          FIRST=1
          for TARGET in $TARGETS; do
            ### -ne 两数不等返回为真 [[  ]]：双括号表示高级字符串处理函数
            ### 可写成 [[ $FIRST -eq 1 ]] || JSON="$JSON"','
            echo -e "\033[31m FIRST: $FIRST \033[0m"
            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            echo -e "\033[31m JSON1: $JSON \033[0m"
            JSON="$JSON"'"'"${TARGET}"'"'
            echo -e "\033[31m JSON2: $JSON \033[0m"
            FIRST=0
          done
          JSON="$JSON"']}'
          echo $JSON
          echo "::set-output name=TARGETS::$JSON"

  Mulit-Images:
    name: ${{ matrix.TARGETS }}
    needs: [Config]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # 
      matrix: ${{fromJson(needs.Config.outputs.TARGETS)}}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Generate Variables
        id: env
        run: |
          chmod +x Shell/env.sh
          bash Shell/env.sh

      - name: Initialization Environment
        if: env.Environment == 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
                gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget qemu-utils
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
      - name: Clone source code
       # working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load custom feeds
        run: |
          # [ -e config/$FEEDS_CONF ] && cp config/$FEEDS_CONF openwrt/feeds.conf.default
          chmod +x Shell/$DIY_P1_SH
          cd openwrt
          echo '---------------------------------------------------------------'
          $GITHUB_WORKSPACE/Shell/$DIY_P1_SH
      
          
      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
          # [ -e files ] && cp files openwrt/files
        run: |
          [ -e config/$CONFIG_FILE ] && cp config/$CONFIG_FILE openwrt/
          chmod +x Shell/$DIY_P2_SH
          cd openwrt
          mv $CONFIG_FILE .config
          $GITHUB_WORKSPACE/Shell/$DIY_P2_SH

      - name: Download package_1
        id: package_
        run: |
          cd openwrt && make defconfig && make download -j$DOWNLOAD
          find dl -size -1024c -exec ls -l {} \; 
          find dl -size -1024c -exec rm -f {} \;
        
      - name: 1.Compile
        id: compile_1
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          [[ $NPROC -eq 0 ]] && make -j$(nproc) || make -j$NPROC
          echo "::set-output name=status::success"
        
      - name: 1.Compile failure
        if: ${{ failure() }}
        id: Compile_failure_1
        run: |
          cd openwrt && make -j1 V=s 
          echo "::set-output name=status::success"  ; fi

      - name: 1.Check space usage
        if: (!cancelled())
        run: df -hT

          
      - name : 1.Upload BIN
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.BIN }}
          path: openwrt/bin/
          if-no-files-found: error # error 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name : 1.Upload factory
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.FACTORY }}
          path: openwrt/bin/targets/*/*/*squashfs-factory.bin
          if-no-files-found: ignore # error 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name : 1.Upload sysupgrade
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.SYSUPGRADE }}
          path: openwrt/bin/targets/*/*/*squashfs-sysupgrade.bin
          if-no-files-found: warn # error 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name : 1.Delete BIN
        run: |
          rm -rf openwrt/bin
     
    
      - name: 2. 构建原厂Uboot 修改前config
        run: |
          rm -rf openwrt/.config
          [ -e config/$CONFIG_FILE ] && cp config/$CONFIG_FILE openwrt/
          cp Shell/REVISECONFIG.sh openwrt/
          cd openwrt
          mv $CONFIG_FILE .config
          echo "修改前"
          cat .config
        
      - name: 2.修改后config
        run: |
          cd openwrt
          ./REVISECONFIG.sh  $NAME
          echo "修改后"
          cat .config

      - name: 2.Download package
        id: package2
        run: |
          cd openwrt && make defconfig && make download -j$DOWNLOAD
          find dl -size -1024c -exec ls -l {} \; 
          find dl -size -1024c -exec rm -f {} \;
        
      - name: 2.Compile
        id: compile_2
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          [[ $NPROC -eq 0 ]] && make -j$(nproc) || make -j$NPROC
          echo "::set-output name=status::success"
        
      - name: 2.Compile failure
        if: ${{ failure() }}
        id: Compile_failure_2
        run: |
          cd openwrt && make -j1 V=s 
          echo "::set-output name=status::success"  ; fi

          
      - name : 2.Upload Vanilla BIN
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.VanillaBIN }}
          path: openwrt/bin/
          if-no-files-found: error # error 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name : 2.Upload Vanilla factory
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.VanillaFACTORY }}
          path: openwrt/bin/targets/*/*/*squashfs-factory.bin
          if-no-files-found: warn # error 'warn' or 'ignore' are also available, defaults to `warn`
          
      - name : 2.Upload Vanilla sysupgrade
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.VanillaSYSUPGRADE }}
          path: openwrt/bin/targets/*/*/*squashfs-sysupgrade.bin
          if-no-files-found: warn # error 'warn' or 'ignore' are also available, defaults to `warn`


          
          
          
          
          
          
          
          
          
          
          
          
